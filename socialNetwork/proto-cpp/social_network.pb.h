// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social_network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_social_5fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_social_5fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_social_5fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_social_5fnetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_social_5fnetwork_2eproto;
namespace social_network_grpc {
class TextRequest;
struct TextRequestDefaultTypeInternal;
extern TextRequestDefaultTypeInternal _TextRequest_default_instance_;
class TextRequest_CarrierEntry_DoNotUse;
struct TextRequest_CarrierEntry_DoNotUseDefaultTypeInternal;
extern TextRequest_CarrierEntry_DoNotUseDefaultTypeInternal _TextRequest_CarrierEntry_DoNotUse_default_instance_;
class TextResult;
struct TextResultDefaultTypeInternal;
extern TextResultDefaultTypeInternal _TextResult_default_instance_;
class Url;
struct UrlDefaultTypeInternal;
extern UrlDefaultTypeInternal _Url_default_instance_;
class UserMention;
struct UserMentionDefaultTypeInternal;
extern UserMentionDefaultTypeInternal _UserMention_default_instance_;
}  // namespace social_network_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::social_network_grpc::TextRequest* Arena::CreateMaybeMessage<::social_network_grpc::TextRequest>(Arena*);
template<> ::social_network_grpc::TextRequest_CarrierEntry_DoNotUse* Arena::CreateMaybeMessage<::social_network_grpc::TextRequest_CarrierEntry_DoNotUse>(Arena*);
template<> ::social_network_grpc::TextResult* Arena::CreateMaybeMessage<::social_network_grpc::TextResult>(Arena*);
template<> ::social_network_grpc::Url* Arena::CreateMaybeMessage<::social_network_grpc::Url>(Arena*);
template<> ::social_network_grpc::UserMention* Arena::CreateMaybeMessage<::social_network_grpc::UserMention>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace social_network_grpc {

// ===================================================================

class TextRequest_CarrierEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextRequest_CarrierEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TextRequest_CarrierEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TextRequest_CarrierEntry_DoNotUse();
  explicit constexpr TextRequest_CarrierEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TextRequest_CarrierEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TextRequest_CarrierEntry_DoNotUse& other);
  static const TextRequest_CarrierEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TextRequest_CarrierEntry_DoNotUse*>(&_TextRequest_CarrierEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "social_network_grpc.TextRequest.CarrierEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "social_network_grpc.TextRequest.CarrierEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:social_network_grpc.TextRequest) */ {
 public:
  inline TextRequest() : TextRequest(nullptr) {}
  ~TextRequest() override;
  explicit constexpr TextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextRequest(const TextRequest& from);
  TextRequest(TextRequest&& from) noexcept
    : TextRequest() {
    *this = ::std::move(from);
  }

  inline TextRequest& operator=(const TextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextRequest& operator=(TextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextRequest* internal_default_instance() {
    return reinterpret_cast<const TextRequest*>(
               &_TextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextRequest& a, TextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "social_network_grpc.TextRequest";
  }
  protected:
  explicit TextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCarrierFieldNumber = 3,
    kTextFieldNumber = 2,
    kReqIdFieldNumber = 1,
  };
  // map<string, string> carrier = 3;
  int carrier_size() const;
  private:
  int _internal_carrier_size() const;
  public:
  void clear_carrier();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_carrier() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_carrier();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      carrier() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_carrier();

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 req_id = 1;
  void clear_req_id();
  int64_t req_id() const;
  void set_req_id(int64_t value);
  private:
  int64_t _internal_req_id() const;
  void _internal_set_req_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:social_network_grpc.TextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TextRequest_CarrierEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> carrier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int64_t req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_social_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class UserMention final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:social_network_grpc.UserMention) */ {
 public:
  inline UserMention() : UserMention(nullptr) {}
  ~UserMention() override;
  explicit constexpr UserMention(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMention(const UserMention& from);
  UserMention(UserMention&& from) noexcept
    : UserMention() {
    *this = ::std::move(from);
  }

  inline UserMention& operator=(const UserMention& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMention& operator=(UserMention&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMention& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMention* internal_default_instance() {
    return reinterpret_cast<const UserMention*>(
               &_UserMention_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserMention& a, UserMention& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMention* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMention* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMention* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMention>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMention& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserMention& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMention* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "social_network_grpc.UserMention";
  }
  protected:
  explicit UserMention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:social_network_grpc.UserMention)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_social_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Url final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:social_network_grpc.Url) */ {
 public:
  inline Url() : Url(nullptr) {}
  ~Url() override;
  explicit constexpr Url(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Url(const Url& from);
  Url(Url&& from) noexcept
    : Url() {
    *this = ::std::move(from);
  }

  inline Url& operator=(const Url& from) {
    CopyFrom(from);
    return *this;
  }
  inline Url& operator=(Url&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Url& default_instance() {
    return *internal_default_instance();
  }
  static inline const Url* internal_default_instance() {
    return reinterpret_cast<const Url*>(
               &_Url_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Url& a, Url& b) {
    a.Swap(&b);
  }
  inline void Swap(Url* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Url* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Url* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Url>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Url& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Url& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Url* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "social_network_grpc.Url";
  }
  protected:
  explicit Url(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortenedUrlFieldNumber = 1,
    kExpandedUrlFieldNumber = 2,
  };
  // string shortened_url = 1;
  void clear_shortened_url();
  const std::string& shortened_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shortened_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shortened_url();
  PROTOBUF_NODISCARD std::string* release_shortened_url();
  void set_allocated_shortened_url(std::string* shortened_url);
  private:
  const std::string& _internal_shortened_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shortened_url(const std::string& value);
  std::string* _internal_mutable_shortened_url();
  public:

  // string expanded_url = 2;
  void clear_expanded_url();
  const std::string& expanded_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expanded_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expanded_url();
  PROTOBUF_NODISCARD std::string* release_expanded_url();
  void set_allocated_expanded_url(std::string* expanded_url);
  private:
  const std::string& _internal_expanded_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expanded_url(const std::string& value);
  std::string* _internal_mutable_expanded_url();
  public:

  // @@protoc_insertion_point(class_scope:social_network_grpc.Url)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortened_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expanded_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_social_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class TextResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:social_network_grpc.TextResult) */ {
 public:
  inline TextResult() : TextResult(nullptr) {}
  ~TextResult() override;
  explicit constexpr TextResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextResult(const TextResult& from);
  TextResult(TextResult&& from) noexcept
    : TextResult() {
    *this = ::std::move(from);
  }

  inline TextResult& operator=(const TextResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextResult& operator=(TextResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextResult* internal_default_instance() {
    return reinterpret_cast<const TextResult*>(
               &_TextResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TextResult& a, TextResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TextResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "social_network_grpc.TextResult";
  }
  protected:
  explicit TextResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserMentionsFieldNumber = 2,
    kUrlsFieldNumber = 3,
    kTextFieldNumber = 1,
  };
  // repeated .social_network_grpc.UserMention user_mentions = 2;
  int user_mentions_size() const;
  private:
  int _internal_user_mentions_size() const;
  public:
  void clear_user_mentions();
  ::social_network_grpc::UserMention* mutable_user_mentions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::UserMention >*
      mutable_user_mentions();
  private:
  const ::social_network_grpc::UserMention& _internal_user_mentions(int index) const;
  ::social_network_grpc::UserMention* _internal_add_user_mentions();
  public:
  const ::social_network_grpc::UserMention& user_mentions(int index) const;
  ::social_network_grpc::UserMention* add_user_mentions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::UserMention >&
      user_mentions() const;

  // repeated .social_network_grpc.Url urls = 3;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  ::social_network_grpc::Url* mutable_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::Url >*
      mutable_urls();
  private:
  const ::social_network_grpc::Url& _internal_urls(int index) const;
  ::social_network_grpc::Url* _internal_add_urls();
  public:
  const ::social_network_grpc::Url& urls(int index) const;
  ::social_network_grpc::Url* add_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::Url >&
      urls() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:social_network_grpc.TextResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::UserMention > user_mentions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::Url > urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_social_5fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TextRequest

// int64 req_id = 1;
inline void TextRequest::clear_req_id() {
  req_id_ = int64_t{0};
}
inline int64_t TextRequest::_internal_req_id() const {
  return req_id_;
}
inline int64_t TextRequest::req_id() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.TextRequest.req_id)
  return _internal_req_id();
}
inline void TextRequest::_internal_set_req_id(int64_t value) {
  
  req_id_ = value;
}
inline void TextRequest::set_req_id(int64_t value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:social_network_grpc.TextRequest.req_id)
}

// string text = 2;
inline void TextRequest::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextRequest::text() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.TextRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextRequest::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:social_network_grpc.TextRequest.text)
}
inline std::string* TextRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:social_network_grpc.TextRequest.text)
  return _s;
}
inline const std::string& TextRequest::_internal_text() const {
  return text_.Get();
}
inline void TextRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextRequest::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextRequest::release_text() {
  // @@protoc_insertion_point(field_release:social_network_grpc.TextRequest.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:social_network_grpc.TextRequest.text)
}

// map<string, string> carrier = 3;
inline int TextRequest::_internal_carrier_size() const {
  return carrier_.size();
}
inline int TextRequest::carrier_size() const {
  return _internal_carrier_size();
}
inline void TextRequest::clear_carrier() {
  carrier_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextRequest::_internal_carrier() const {
  return carrier_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TextRequest::carrier() const {
  // @@protoc_insertion_point(field_map:social_network_grpc.TextRequest.carrier)
  return _internal_carrier();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextRequest::_internal_mutable_carrier() {
  return carrier_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TextRequest::mutable_carrier() {
  // @@protoc_insertion_point(field_mutable_map:social_network_grpc.TextRequest.carrier)
  return _internal_mutable_carrier();
}

// -------------------------------------------------------------------

// UserMention

// int64 user_id = 1;
inline void UserMention::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t UserMention::_internal_user_id() const {
  return user_id_;
}
inline int64_t UserMention::user_id() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.UserMention.user_id)
  return _internal_user_id();
}
inline void UserMention::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void UserMention::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:social_network_grpc.UserMention.user_id)
}

// string username = 2;
inline void UserMention::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserMention::username() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.UserMention.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMention::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:social_network_grpc.UserMention.username)
}
inline std::string* UserMention::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:social_network_grpc.UserMention.username)
  return _s;
}
inline const std::string& UserMention::_internal_username() const {
  return username_.Get();
}
inline void UserMention::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserMention::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserMention::release_username() {
  // @@protoc_insertion_point(field_release:social_network_grpc.UserMention.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserMention::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:social_network_grpc.UserMention.username)
}

// -------------------------------------------------------------------

// Url

// string shortened_url = 1;
inline void Url::clear_shortened_url() {
  shortened_url_.ClearToEmpty();
}
inline const std::string& Url::shortened_url() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.Url.shortened_url)
  return _internal_shortened_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Url::set_shortened_url(ArgT0&& arg0, ArgT... args) {
 
 shortened_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:social_network_grpc.Url.shortened_url)
}
inline std::string* Url::mutable_shortened_url() {
  std::string* _s = _internal_mutable_shortened_url();
  // @@protoc_insertion_point(field_mutable:social_network_grpc.Url.shortened_url)
  return _s;
}
inline const std::string& Url::_internal_shortened_url() const {
  return shortened_url_.Get();
}
inline void Url::_internal_set_shortened_url(const std::string& value) {
  
  shortened_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Url::_internal_mutable_shortened_url() {
  
  return shortened_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Url::release_shortened_url() {
  // @@protoc_insertion_point(field_release:social_network_grpc.Url.shortened_url)
  return shortened_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Url::set_allocated_shortened_url(std::string* shortened_url) {
  if (shortened_url != nullptr) {
    
  } else {
    
  }
  shortened_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortened_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shortened_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shortened_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:social_network_grpc.Url.shortened_url)
}

// string expanded_url = 2;
inline void Url::clear_expanded_url() {
  expanded_url_.ClearToEmpty();
}
inline const std::string& Url::expanded_url() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.Url.expanded_url)
  return _internal_expanded_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Url::set_expanded_url(ArgT0&& arg0, ArgT... args) {
 
 expanded_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:social_network_grpc.Url.expanded_url)
}
inline std::string* Url::mutable_expanded_url() {
  std::string* _s = _internal_mutable_expanded_url();
  // @@protoc_insertion_point(field_mutable:social_network_grpc.Url.expanded_url)
  return _s;
}
inline const std::string& Url::_internal_expanded_url() const {
  return expanded_url_.Get();
}
inline void Url::_internal_set_expanded_url(const std::string& value) {
  
  expanded_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Url::_internal_mutable_expanded_url() {
  
  return expanded_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Url::release_expanded_url() {
  // @@protoc_insertion_point(field_release:social_network_grpc.Url.expanded_url)
  return expanded_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Url::set_allocated_expanded_url(std::string* expanded_url) {
  if (expanded_url != nullptr) {
    
  } else {
    
  }
  expanded_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expanded_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (expanded_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    expanded_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:social_network_grpc.Url.expanded_url)
}

// -------------------------------------------------------------------

// TextResult

// string text = 1;
inline void TextResult::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextResult::text() const {
  // @@protoc_insertion_point(field_get:social_network_grpc.TextResult.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextResult::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:social_network_grpc.TextResult.text)
}
inline std::string* TextResult::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:social_network_grpc.TextResult.text)
  return _s;
}
inline const std::string& TextResult::_internal_text() const {
  return text_.Get();
}
inline void TextResult::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextResult::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextResult::release_text() {
  // @@protoc_insertion_point(field_release:social_network_grpc.TextResult.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextResult::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:social_network_grpc.TextResult.text)
}

// repeated .social_network_grpc.UserMention user_mentions = 2;
inline int TextResult::_internal_user_mentions_size() const {
  return user_mentions_.size();
}
inline int TextResult::user_mentions_size() const {
  return _internal_user_mentions_size();
}
inline void TextResult::clear_user_mentions() {
  user_mentions_.Clear();
}
inline ::social_network_grpc::UserMention* TextResult::mutable_user_mentions(int index) {
  // @@protoc_insertion_point(field_mutable:social_network_grpc.TextResult.user_mentions)
  return user_mentions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::UserMention >*
TextResult::mutable_user_mentions() {
  // @@protoc_insertion_point(field_mutable_list:social_network_grpc.TextResult.user_mentions)
  return &user_mentions_;
}
inline const ::social_network_grpc::UserMention& TextResult::_internal_user_mentions(int index) const {
  return user_mentions_.Get(index);
}
inline const ::social_network_grpc::UserMention& TextResult::user_mentions(int index) const {
  // @@protoc_insertion_point(field_get:social_network_grpc.TextResult.user_mentions)
  return _internal_user_mentions(index);
}
inline ::social_network_grpc::UserMention* TextResult::_internal_add_user_mentions() {
  return user_mentions_.Add();
}
inline ::social_network_grpc::UserMention* TextResult::add_user_mentions() {
  ::social_network_grpc::UserMention* _add = _internal_add_user_mentions();
  // @@protoc_insertion_point(field_add:social_network_grpc.TextResult.user_mentions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::UserMention >&
TextResult::user_mentions() const {
  // @@protoc_insertion_point(field_list:social_network_grpc.TextResult.user_mentions)
  return user_mentions_;
}

// repeated .social_network_grpc.Url urls = 3;
inline int TextResult::_internal_urls_size() const {
  return urls_.size();
}
inline int TextResult::urls_size() const {
  return _internal_urls_size();
}
inline void TextResult::clear_urls() {
  urls_.Clear();
}
inline ::social_network_grpc::Url* TextResult::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:social_network_grpc.TextResult.urls)
  return urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::Url >*
TextResult::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:social_network_grpc.TextResult.urls)
  return &urls_;
}
inline const ::social_network_grpc::Url& TextResult::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const ::social_network_grpc::Url& TextResult::urls(int index) const {
  // @@protoc_insertion_point(field_get:social_network_grpc.TextResult.urls)
  return _internal_urls(index);
}
inline ::social_network_grpc::Url* TextResult::_internal_add_urls() {
  return urls_.Add();
}
inline ::social_network_grpc::Url* TextResult::add_urls() {
  ::social_network_grpc::Url* _add = _internal_add_urls();
  // @@protoc_insertion_point(field_add:social_network_grpc.TextResult.urls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::social_network_grpc::Url >&
TextResult::urls() const {
  // @@protoc_insertion_point(field_list:social_network_grpc.TextResult.urls)
  return urls_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace social_network_grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_social_5fnetwork_2eproto
